name: snapshots
on:
  schedule: [{ cron: "*/10 6-23 * * *" }]  # 08:00–23:59 DK (UTC+2 i sommer, +1 i vinter)
  workflow_dispatch:
jobs:
  run:
    runs-on: ubuntu-latest
    env:
      POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
      APIFOOTBALL_KEY: ${{ secrets.APIFOOTBALL_KEY }}
      TZ: Europe/Copenhagen
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          python -m pip install "sqlalchemy>=2" "psycopg[binary]" pandas numpy requests pyarrow
      - name: Fetch API-Football odds → Postgres snapshots
        run: |
          python scripts/fetch_apifootball_odds.py \
            --days 1 \
            --imminent-mins 180 \
            --include-ou25 --include-ah \
            --all-books-snapshots \
            --write-parquet

      - name: Report pre-KO coverage (today)
        run: |
          python - <<'PY'
          import os
          from sqlalchemy import create_engine, text
          e = create_engine(os.environ["POSTGRES_URL"], pool_pre_ping=True)
          sql = """
          WITH today_fx AS (
            SELECT fixture_id, kick_off
            FROM outcomes
            WHERE kick_off::date = (now() AT TIME ZONE 'UTC')::date
          ), last_preko AS (
            SELECT s.fixture_id, MAX(s.fetched_at_utc) AS ts
            FROM odds_snapshots s
            JOIN today_fx o USING (fixture_id)
            WHERE s.market='1X2' AND s.fetched_at_utc <= o.kick_off
            GROUP BY s.fixture_id
          )
          SELECT (SELECT COUNT(*) FROM today_fx) AS fixtures_today,
                 (SELECT COUNT(*) FROM last_preko) AS with_preko
          """
          with e.connect() as c:
            total, covered = c.execute(text(sql)).fetchone()
            pct = (covered/total*100.0) if total else 0.0
            print(f"pre-KO coverage today: {covered}/{total} ({pct:.1f}%)")
          PY
